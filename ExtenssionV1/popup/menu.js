

// Récupère les éléments du menu
var scanTypeSelect = document.getElementById("scan-type");
var startScanButton = document.getElementById("start-scan");

console.log('Avant l\'appel à checkSecurityHeaders');

// Associe une fonction à l'événement de clic sur le bouton
startScanButton.addEventListener("click", function() {
  var selectedScanType = scanTypeSelect.value;
  // Appelle la fonction appropriée en fonction du type de scan sélectionné
  if (selectedScanType === "xss") {
    performXssScan();
  } else if (selectedScanType === "sql-injection") {
    performSqlInjectionScan();
  } else if (selectedScanType === "session-management") {
    performSessionManagementScan();
  } else if (selectedScanType === "security-headers") { // Ajout de la condition pour la vérification des en-têtes de sécurité
    checkSecurityHeaders();
  }
});

// Fonctions de scan pour chaque type de scan
function performXssScan() {
  console.log("Scan de vulnérabilités XSS en cours...");
  const allElements = document.getElementsByTagName('*');
  let potentialXSS = [];
  for (let i = 0; i < allElements.length; i++) {
    const currentElement = allElements[i];
    for (let j = 0; j < currentElement.attributes.length; j++) {
      const currentAttribute = currentElement.attributes[j];
      if (currentAttribute.value.includes('<script>') || currentAttribute.value.includes('</script>')) {
        potentialXSS.push({
          element: currentElement,
          attribute: currentAttribute.name,
          value: currentAttribute.value
        });
      }
    }
    // Ajout de la vérification du contenu de l'élément
    if (currentElement.innerHTML.includes('<script>') || currentElement.innerHTML.includes('</script>')) {
      potentialXSS.push({
        element: currentElement,
        attribute: 'innerHTML',
        value: currentElement.innerHTML
      });
    }
  }
  if (potentialXSS.length === 0) {
    document.getElementById('dialogText').textContent = 'Pas de faille XSS potentielle trouvée.';
  } else {
    document.getElementById('dialogText').textContent = 'Failles XSS potentielles trouvées  ' 
  }
  document.getElementById('dialog').style.display = 'block';

  document.getElementById('dialog').addEventListener('click', function() {
    document.getElementById('dialog').style.display = 'none';
  });
}

function performSqlInjectionScan() {
  console.log("Scan d'injections SQL en cours...");

  // Fonction pour vérifier si les validations des entrées utilisateur existent
  function checkFormValidation() {
      var forms = document.querySelectorAll('form');
      var validationExists = false;
      forms.forEach(function(form) {
          // Vérifie si le formulaire a l'attribut "novalidate"
          if (!form.hasAttribute('novalidate')) {
              validationExists = true;
          }
      });
      return validationExists;
  }

  // Fonction pour vérifier si une chaîne de caractères contient une requête non préparée
  function hasUnpreparedQuery(code) {
      // Expression régulière pour rechercher les requêtes non préparées
      var regex = /\b(query|exec|fetch|execute|queryOne|queryAll|get|post|put|delete|insert|update|delete)\(/gi;
      // Test si la chaîne de caractères contient la regex
      return regex.test(code);
  }

  // Fonction pour vérifier si une chaîne de caractères contient une méthode d'échappement insecure
  function hasInsecureEscapingMethod(code) {
      // Expression régulière pour rechercher des méthodes d'échappement SQL
      var regex = /escape_string\(|mysql_real_escape_string\(|mysqli_real_escape_string\(|PDO::quote\(|pg_escape_string\(|sqlite_escape_string\(|mysql_escape_string\(|addslashes\(|htmlentities\(|htmlspecialchars\(|filter_var\(|\bregexp_replace\(|\bregexp_replace_icase\(|\bregexp_replace_multi\(|\bstr_replace\(|\bstr_ireplace\(|\bstrtr\(|\bstrtr_array\(|\bstrtr_arraycase\(|\bstrtr_unicode\(|\bstrtr_unicodecase\(|\bstrtr_arr_utf8\(|\bstrtr_arr_utf8_icase\(|\bstrtr_arr_utf8_ucase\(|\bstrtr_arr_utf8_lcase\(|\bstrtr_utf8\(|\bstrtr_utf8_icase\(|\bstrtr_utf8_ucase\(|\bstrtr_utf8_lcase\(|\bstrtr_utf8_arr\(|\bstrtr_utf8_arr_icase\(|\bstrtr_utf8_arr_ucase\(|\bstrtr_utf8_arr_lcase\(|\bmysql_real_escape_string\(|\bmysql_escape_string\(|\bmysqli_real_escape_string\(|\bmysqli_escape_string\(|\bpg_escape_string\(|\bpdo->quote\(/gi;

      // Test si la chaîne de caractères ne contient pas la regex
      return !regex.test(code);
  }

  // Vérification des mesures de sécurité
  var formsValidated = checkFormValidation();
  var unpreparedQueriesFound = hasUnpreparedQuery(document.body.innerText);
  var insecureEscapingMethodsFound = hasInsecureEscapingMethod(document.body.innerText);

  if (formsValidated) {
      console.log('Validation des entrées utilisateur détectée.');
  } else {
      console.log('Aucune validation des entrées utilisateur détectée, potentiel faille détectée.');
  }

  if (!unpreparedQueriesFound) {
      console.log('Utilisation de requêtes préparées détectée.');
  } else {
      console.log('Les requêtes ne sont pas préparées, potentiel faille détectée.');
  }

  if (!insecureEscapingMethodsFound) {
      console.log('Échappement des caractères spéciaux détecté.');
  } else {
      console.log('Aucun échappement des caractères spéciaux détecté.');
  }
  document.getElementById('dialogText').textContent = 'Pas de faille SQL potentielle trouvée';
  document.getElementById('dialog').style.display = 'block';

  document.getElementById('dialog').addEventListener('click', function() {
    document.getElementById('dialog').style.display = 'none';
  });
}


function performSessionManagementScan() {
  // Logique de scan pour les failles de gestion des sessions
  console.log("Scan de failles de gestion des sessions en cours...");
}

// Fonction pour effectuer la vérification des en-têtes de sécurité
function checkSecurityHeaders() {
  console.log('Après l\'appel à checkSecurityHeaders');
  const currentUrl = window.location.href;
  const proxyUrl = 'http://localhost:3000/?target=';

  fetch(proxyUrl + encodeURIComponent(currentUrl))
    .then(response => response.headers)
    .then(headers => {
      // Vérification des en-têtes de sécurité
      const xssProtection = headers.get('X-XSS-Protection');
      const contentTypeOptions = headers.get('X-Content-Type-Options');
      const strictTransportSecurity = headers.get('Strict-Transport-Security');
      const contentSecurityPolicy = headers.get('Content-Security-Policy');

      // Génération du rapport
      const report = {
        'X-XSS-Protection': xssProtection,
        'X-Content-Type-Options': contentTypeOptions,
        'Strict-Transport-Security': strictTransportSecurity,
        'Content-Security-Policy': contentSecurityPolicy
      };

      // Création des éléments HTML pour afficher le rapport
      const reportContainer = document.createElement('div');
      reportContainer.innerHTML = '<h2>Rapport de vérification des en-têtes de sécurité :</h2>';

      const reportList = document.createElement('ul');
      for (const header in report) {
        const listItem = document.createElement('li');
        listItem.innerText = `${header}: ${report[header]}`;
        reportList.appendChild(listItem);
      }

      reportContainer.appendChild(reportList);

      // Affichage du rapport dans une fenêtre du navigateur
      document.body.appendChild(reportContainer);
    })
    .catch(error => {
      console.error('Une erreur s\'est produite lors de la vérification des en-têtes de sécurité :', error);
    });
}
